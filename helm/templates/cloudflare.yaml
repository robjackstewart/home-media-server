apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared
spec:
  selector:
    matchLabels:
      app: cloudflared
  replicas: 1 # You could also consider elastic scaling for this deployment
  template:
    metadata:
      labels:
        app: cloudflared
    spec:
      containers:
      - name: cloudflared
        image: {{ include "image" .Values.cloudflared.image }}
        imagePullPolicy: {{ .Values.cloudflared.image.pullPolicy }}
        args:
        - tunnel
        # Points cloudflared to the config file, which configures what
        # cloudflared will actually do. This file is created by a ConfigMap
        # below.
        - --config
        - /etc/cloudflared/config/config.yaml
        - run
        livenessProbe:
          httpGet:
            path: /ready
            port: {{ .Values.cloudflared.ports.http }}
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: {{ .Values.cloudflared.ports.http }}
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 1
        volumeMounts:
        - name: config
          mountPath: /etc/cloudflared/config
          readOnly: true
        - name: creds
          mountPath: /etc/cloudflared/creds
          readOnly: true
      volumes:
      - name: creds
        secret:
          secretName: {{ .Values.argoTunnel.credentials.secretName }}
      - name: config
        configMap:
          name: cloudflared
          items:
          - key: config.yaml
            path: config.yaml

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudflared
data:
  config.yaml: |
    # Name of the tunnel you want to run
    tunnel: {{ .Values.argoTunnel.id }}
    credentials-file: /etc/cloudflared/creds/credentials.json
    metrics: 0.0.0.0:2000
    no-autoupdate: true
    ingress:
    # This rule sends all requests to nginx ingress controller, which proxies them further to correct services
    - service: http://{{ .Release.Name }}-ingress-nginx-controller:80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: media-server-cloudflare-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: nginx
  rules:
  - host: {{ .Values.domain.main }}
    http:
      paths:
      - path: /radarr
        pathType: Prefix
        backend:
          service:
            name: radarr-service
            port:
              number: {{ .Values.radarr.ports.http }}
      - path: /sonarr
        pathType: Prefix
        backend:
          service:
            name: sonarr-service
            port:
              number: {{ .Values.sonarr.ports.http }}
      - path: /bazarr
        pathType: Prefix
        backend:
          service:
            name: bazarr-service
            port:
              number: {{ .Values.bazarr.ports.http }}
      - path: /prowlarr
        pathType: Prefix
        backend:
          service:
            name: prowlarr-service
            port:
              number: {{ .Values.prowlarr.ports.http }}
      - path: /transmission
        pathType: Prefix
        backend:
          service:
            name: transmission-service
            port:
              number: {{ .Values.transmission.ports.http }}
      - path: /jellyfin
        pathType: Prefix
        backend:
          service:
            name: jellyfin-service
            port:
              number: {{ .Values.jellyfin.ports.http.cluster }}
      - path: /jellyseerr
        pathType: Prefix
        backend:
          service:
            name: jellyseerr-service
            port:
              number: {{ .Values.jellyseerr.ports.nginx }}
      - path: /calibre
        pathType: Prefix
        backend:
          service:
            name: calibre-service
            port:
              number: {{ .Values.calibre.ports.nginx }}
      - path: /heimdall
        pathType: Prefix
        backend:
          service:
            name: heimdall-service
            port:
              number: {{ .Values.heimdall.ports.http }}
      - path: /
        pathType: Prefix
        backend:
          service:
            name: heimdall-service
            port:
              number: {{ .Values.heimdall.ports.http }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: homeassistant-cloudflare-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: nginx
  rules:
  - host: {{ .Values.domain.homeassistant }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: homeassistant-service
            port:
              number: {{ .Values.homeassistant.ports.http }}